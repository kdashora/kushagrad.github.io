{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Name: Kushagra Dashora Class: EGR314 - 12:00PM - 1:15PM Monday/Wednesday Professor: Dr. Kevin Nichols  </p>","tags":["tag1","tag2"]},{"location":"#about-me","title":"About Me","text":"<p>Kushagra's EGR 314 Project Spring 2025 Innovation Showcase</p> <p>\"Hey! I'm Kushagra Dashora, and this project is part of my Spring 2025 Innovation showcase at Arizona State University. Our mission is to design and develop a STEM-themed, interactive, web-enabled device that inspires K-12 students to explore science, technology, engineering, and math (STEM). With my background in robotics and embedded systems, I aim to create an engaging and educational experience that sparks curiosity and innovation in young minds.\"</p>","tags":["tag1","tag2"]},{"location":"#team-goals","title":"Team Goals","text":"<ul> <li>Develop a high-quality, market-ready product that aligns with industry expectations.  </li> <li>Foster effective collaboration to ensure seamless teamwork and successful project delivery.  </li> <li>Adhere to industry standards and embrace modular design principles for scalability and reliability.  </li> <li>Strengthen technical skills by tackling real-world engineering challenges.  </li> <li>Design an engaging and user-friendly experience tailored for K-12 students.  </li> <li>Prioritize sustainability and innovation in all aspects of development.  </li> <li>Meet project deadlines while maintaining efficiency and staying within budget.  </li> </ul>","tags":["tag1","tag2"]},{"location":"#team-coordination-accountability","title":"Team Coordination &amp; Accountability","text":"<p>Our team is structured to leverage each member\u2019s expertise effectively:  </p> <ul> <li>Aarshon \u2013 Team Lead &amp; Systems Integrator: Oversees project execution, ensuring seamless integration of components.  </li> <li>Alex \u2013 Hardware Specialist: Designs and develops the hardware framework for the device.  </li> <li>Ian \u2013 Software Developer: Implements and optimizes the software architecture.  </li> <li>Kushagra \u2013 User Experience Designer &amp; Tester: Focuses on usability, ensuring an intuitive and engaging experience for users.  </li> </ul>","tags":["tag1","tag2"]},{"location":"API/","title":"API Messaging Compliance","text":"<p>Author: Kushagra Dashora  </p> <p>This document outlines the message structure used by the Internet Communication Subsystem for receiving broadcast sensor data from the Sensor Suite. Messages are parsed over UART and published to the MQTT dashboard.</p>"},{"location":"API/#subsystem-connection","title":"\ud83d\udd17 Subsystem Connection","text":"<p>This subsystem receives broadcasted sensor readings from Ian Anderson\u2019s Sensor Suite and interacts with:</p> <ul> <li>Solar Array \u2013 Alex Comeaux  </li> <li>HMI Interface \u2013 Aarshon George  </li> <li>MQTT Server / GitHub Dashboard \u2013 Cloud endpoint  </li> </ul>"},{"location":"API/#received-messages","title":"\ud83d\udce5 Received Messages","text":""},{"location":"API/#broadcast-sensor-data","title":"Broadcast Sensor Data","text":"<p>Receives real-time sensor values from the Sensor subsystem (Ian). Used to display values on a web dashboard via MQTT.</p> Variable Name byte 1 byte 2 byte 3-4 msg_type <code>0x31</code> <code>0x31</code>\u2013<code>0x34</code> <code>sensor_val</code> (uint16_t, big endian)"},{"location":"API/#sensor-reference-table","title":"Sensor Reference Table","text":"Sensor Number Data Min Data Max Wind Speed 1 0 100 Temperature 2 -40 85 Humidity 3 20 80 Air Pressure 4 10 1300 <p>Example: <code>[0x31, 0x33, 0x00, 0x25]</code> \u2192 Humidity sensor sending value 37</p>"},{"location":"API/#outgoing-messages","title":"\ud83d\udce4 Outgoing Messages","text":""},{"location":"API/#subsystem-error-code","title":"Subsystem Error Code","text":"<p>Sends a code representing WebSocket subsystem\u2019s functionality.</p> Byte 1 (msg_type) Byte 2 (err_code) <code>0x34</code> <code>0x01</code>\u2013<code>0x03</code>"},{"location":"API/#error-code-table","title":"Error Code Table","text":"Code Meaning 1 Full functionality 2 Partial functionality 3 No functionality <p>Example: <code>[0x34, 0x01]</code> \u2192 System fully functional</p>"},{"location":"API/#subsystem-error-message","title":"Subsystem Error Message","text":"<p>Sends a descriptive error message to the HMI (Aarshon).</p> Byte 1 (msg_type) Byte 2\u201358 (err_msg) <code>0x35</code> char array (1\u201357 characters) <p>Example: <code>[0x35, \"MQTT server unreachable\"]</code></p>"},{"location":"API/#message-structure-summary","title":"\ud83e\udded Message Structure Summary","text":"Byte Index Description Example <code>[0]</code> Start Byte 1 <code>'A'</code> <code>[1]</code> Start Byte 2 <code>'Z'</code> <code>[2]</code> Sender ID <code>'k'</code> <code>[3]</code> Receiver ID <code>'a'</code>, <code>'i'</code>, <code>'c'</code> <code>[4]</code> msg_type (1\u20135) <code>0x31</code> <code>[5\u2013n]</code> Data / Payload Varies <code>[n+1]</code> End Byte 1 <code>'Y'</code> <code>[n+2]</code> End Byte 2 <code>'B'</code>"},{"location":"API/#team-member-ids","title":"\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 Team Member IDs","text":"Name Subsystem Char Address Aarshon HMI <code>'a'</code> Alex Actuator <code>'c'</code> Ian Sensor <code>'i'</code> KD WebSocket <code>'k'</code>"},{"location":"Bill%20Of%20Materials/","title":"Bill of Materials (BOM)","text":"Comment Description Designator Footprint LibRef Quantity 8-Pin Board Connector 8-Pin Board Connector 1 AP63203WU_7 AP63203WU_7 1 Fuse Fuse 1.5A Fuse 1 Capacitor Capacitor C2, C3, C4 Capacitor 3 Light-Emitting Diode Light-Emitting Diode D1, D2 LED 2"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#final-block-diagram","title":"Final Block Diagram","text":"<p>Here is the updated and finalized block diagram for the Internet Communication Subsystem:</p> <p></p> <p>Download Subsystem Block Diagram PDF</p>"},{"location":"Block%20Diagram/#design-explanation","title":"Design Explanation","text":"<p>This updated block diagram represents the finalized design of the Internet Communication Subsystem, incorporating all feedback and refinements made throughout the project development cycle. </p> <p>Key updates include: - Updated GPIO connections: GPIO 35, 38, 43, and 44 are now designated for serial and digital communications between the ESP32 and other headers. - Simplified wiring structure with better separation of upstream and downstream communication. - Clearer labeling of power flow from the 9V barrel jack, through a 3.3V switching regulator, and into the ESP32 WiFi module.</p>"},{"location":"Block%20Diagram/#decision-making-process","title":"Decision-Making Process","text":"<p>Our goal from the start was to establish a stable and efficient wireless communication pipeline between the environmental sensor subsystems and an external MQTT server/GitHub-hosted dashboard. </p> <p>The ESP32-S3-WROOM-1-N4 was selected for its low-power wireless connectivity, integration ease, and support for MQTT protocol. GPIOs were chosen based on their digital I/O functionality and UART compatibility, and adjusted after prototype testing for best performance.</p> <p>We used a 3.3V switching regulator to safely convert the 9V barrel jack input to a level suitable for the ESP32. The use of jumpers and headers ensures modularity and ease of debugging during subsystem integration.</p>"},{"location":"Block%20Diagram/#product-requirement-alignment","title":"Product Requirement Alignment","text":"<p>This design satisfies the Internet Communication Subsystem\u2019s functional and electrical requirements: - Wi-Fi-enabled MQTT publishing of sensor data to a cloud server or GitHub-hosted website. - Reliable UART and GPIO-based communication with both upstream and downstream subsystems. - Regulated power delivery using a dedicated voltage regulator. - Scalable and modular system design using upstream/downstream headers to support other student-designed subsystems.</p> <p>This final version is optimized for both functionality and maintainability in real-world classroom and demo environments.</p>"},{"location":"Component%20Selection/","title":"Subsystem Documentation: Wi-Fi-Enabled Data Collection and Transmission","text":"","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#introduction","title":"Introduction","text":"<p>As part of our embedded systems design project, my subsystem is responsible for collecting data from all sensors in the system, transmitting it via a Wi-Fi network created by the ESP32 microcontroller, and updating this data in real-time on a GitHub-hosted webpage. This document outlines the selection of components for my subsystem, focusing on efficient power regulation, reliable wireless communication, and seamless integration with sensors.</p>","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#major-component-selections","title":"Major Component Selections","text":"","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#microcontroller-selection","title":"Microcontroller Selection","text":"<p>The ESP32 microcontroller is the core of this subsystem, providing Wi-Fi connectivity and the processing power needed to gather and transmit sensor data.</p> Option Pros Cons Unit Cost &amp; Link ESP32-S3-WROOM-1-N4 (Final Choice) Built-in Wi-Fi/Bluetooth, supports multiple serial protocols, low power modes, 4MB Flash 3.3V logic may require level shifters for some peripherals $2.95 DigiKey ESP8266 Low cost, simple to use Limited GPIO pins, no dual-core processor $1.60 DigiKey Raspberry Pi Pico W Dual-core processor, Wi-Fi support Higher power consumption, larger physical size $6.00 DigiKey <p>Final Selection: ESP32-S3-WROOM-1-N4 Rationale: The ESP32-S3-WROOM-1-N4 was selected due to its robust Wi-Fi capabilities, dual-core processor for multitasking, and excellent library support for embedded data transmission tasks.</p>","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#power-regulation","title":"Power Regulation","text":"<p>To ensure stable operation of the ESP32 and sensors, a voltage regulator is required to step down the input voltage to 3.3V.</p> Option Pros Cons Unit Cost &amp; Link AP63203WU_7 (Final Choice) High efficiency, compact size, low quiescent current Slightly higher cost than linear regulators $1.38 DigiKey AMS1117-3.3 Simple design Low efficiency $0.68 DigiKey LM2596 High efficiency Larger physical size $6.70 DigiKey <p>Final Selection: AP63203WU_7 Rationale: The AP63203WU_7 was selected due to its high efficiency, low power loss, compact size, and suitability for surface mount applications, making it ideal for the power requirements of the ESP32 and associated components.</p>","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#power-input","title":"Power Input","text":"<p>The subsystem requires a reliable power source capable of providing sufficient current for the ESP32 and sensors.</p> Option Pros Cons Unit Cost &amp; Link DC Barrel Jack Adapter (Final Choice) Simple, reliable, provides stable power Requires external adapter $1.50 DigiKey <p>Final Selection: DC Barrel Jack Adapter Rationale: A DC barrel jack adapter was selected for its simplicity and ability to provide stable power from a wall adapter or external supply. This ensures consistent operation during extended use.</p>","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#additional-components-to-enhance-subsystem","title":"Additional Components to Enhance Subsystem","text":"<p>To improve functionality and robustness, the following additional components are recommended:</p> <ol> <li>Capacitors (Decoupling):</li> <li> <p>Add 10\u00b5F and 0.1\u00b5F capacitors near the ESP32 and voltage regulator to reduce noise and stabilize voltage.</p> </li> <li> <p>Heat Sink (Optional):</p> </li> <li> <p>Improve thermal performance of the voltage regulator during extended operation.</p> </li> <li> <p>LED Indicators:</p> </li> <li>Include LEDs for power status and Wi-Fi activity to aid debugging.</li> </ol>","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#responsibilities","title":"Responsibilities","text":"<ol> <li>Data Collection: Collect sensor data using UART (serial communication).</li> <li>Wi-Fi Communication: Use the ESP32's built-in Wi-Fi module to create a local network and transmit sensor data.</li> <li>Power Management: Regulate input voltage using the AP63203WU_7 regulator to ensure a stable 3.3V supply.</li> <li>Data Transmission: Continuously update sensor readings on a GitHub-hosted webpage in real time.</li> <li>Integration: Ensure seamless compatibility between sensors and the microcontroller through proper pin allocation and power management.</li> </ol>","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#pin-allocation","title":"Pin Allocation","text":"","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#esp32-peripheral-pin-assignments","title":"ESP32 Peripheral Pin Assignments:","text":"Peripheral Pin Assignment UART TX GPIO1 UART RX GPIO3 Micro USB D- GPIO19 Micro USB D+ GPIO20 Power Input VIN via DC Barrel Jack","tags":["Wi-Fi","Embedded Systems"]},{"location":"Component%20Selection/#conclusion","title":"Conclusion","text":"<p>The selected components ensure efficient integration of all sensors with the ESP32 microcontroller while meeting project specifications for real-time data collection and transmission to a GitHub-hosted webpage. By selecting the AP63203WU_7 regulator, the subsystem benefits from improved power efficiency, and by limiting communication to UART only, the design is simplified for reliable data transfer.</p>","tags":["Wi-Fi","Embedded Systems"]},{"location":"ESP32%20Table/","title":"ESP32 Table","text":"ESP Info Answer Model ESP32-S3-WROOM-1-N4 Product Page URL ESP32-S3-WROOM-1 ESP32-S3-WROOM-1-N4 Datasheet URL link ESP32 S3 Datasheet URL link ESP32 S3 Technical Reference Manual URL link Vendor link link Code Examples ESP-IDF GitHub Repository External Resources URL(s) YouTube Tutorials Unit cost $2.95 Absolute Maximum Current for entire IC 1500 mA Supply Voltage Range 3.0 V to 3.6 Maximum GPIO current (per pin) Not explicitly stated but typically around 40mA max Supports External Interrupts? Yes Required Programming Hardware, Cost, URL USB3131-30-0230-A Micro-USB Port; pricing available via vendor link. Module # Available Needed Associated Pins UART 2 2 UART0: TXD0 (GPIO43), RXD0 (GPIO44); UART1: Configurable External SPI 4 ? SPI2 (HSPI): SCK (GPIO36), MISO (GPIO37), MOSI (GPIO35), CS0 (GPIO34); SPI3 (VSPI): SCK (GPIO18), MISO (GPIO17), MOSI (GPIO8), CS0 (GPIO11); SPI0 and SPI1 are used internally for flash and PSRAM I2C 2 ? I2C0: SCL (GPIO1), SDA (GPIO0); I2C1: SCL (GPIO3), SDA (GPIO2) GPIO 45 ? GPIO0 to GPIO44; Note: Some GPIOs have specific functions or are used internally. Refer to the ESP32-S3 datasheet for detailed information. ADC 20 ? ADC1: Channels on GPIO1 to GPIO10; ADC2: Channels on GPIO11 to GPIO20 LED PWM 16 ? Configurable on any GPIO Motor PWM 16 ? Configurable on any GPIO USB Programmer 1 1 USB D+ (GPIO19), USB D- (GPIO20)"},{"location":"Subsystem%20Schematic/","title":"Schematic Design","text":""},{"location":"Subsystem%20Schematic/#block-diagram","title":"Block Diagram","text":"<p>Here is the block diagram for Internet Communication Subsystem: </p>"},{"location":"Subsystem%20Schematic/#subsystem-schematic","title":"Subsystem Schematic","text":"<p>Download Subsystem Schematic PDF</p> <p>Download Subsystem Project Zip</p>"},{"location":"Subsystem%20Schematic/#power-budget","title":"Power Budget","text":"<p>Here is the Power Budget for Internet Communication Subsystem: </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}